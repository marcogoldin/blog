{
  
    
        "post0": {
            "title": "Open Data Biblioteche di Roma",
            "content": ". import os import glob import subprocess import pprint . selenium . from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.support.select import Select from selenium.webdriver.firefox.options import Options from selenium.common import exceptions opts = Options() #facoltativo in ambiente desktop (obbligatorio nel caso di script lato server) #opts.headless = True profile = webdriver.FirefoxProfile() profile.set_preference(&quot;browser.privatebrowsing.autostart&quot;, True) #profile.set_preference(&quot;permissions.default.image&quot;, 2) #facoltativo # il driver gecko si scarica qui: https://github.com/mozilla/geckodriver/releases/tag/v0.24.0 # inizializzare il driver specificando come sempre la posizione del geckodriver nel proprio pc/server driver = ( webdriver.Firefox( executable_path=&#39;/path-to/geckodriver&#39;, firefox_profile=profile, options=opts)) wait_explicit = WebDriverWait(driver, 20) . Cartella che conterr&#224; le sotto-cartelle con i singoli csv mensili . # es.: &#39;/path-to/csv_prestiti_mensili&#39; folder_path = &#39;&#39; . Scraping . link alla pagina con i csv mensili: https://www.bibliotechediroma.it/opendata?path=DET_P_MESEPREC . driver.get(&#39;https://www.bibliotechediroma.it/opendata?path=DET_P_MESEPREC&#39;) wait_explicit.until( EC.presence_of_element_located( (By.XPATH, &#39;//*[@id=&quot;block-bibliotu-content&quot;]/article/ul&#39;))) corpo_article = driver.find_element_by_xpath( &#39;//*[@id=&quot;block-bibliotu-content&quot;]/article/ul&#39;) blocchi = [ [i.text.split(&#39; n&#39;)] for i in corpo_article.find_elements_by_xpath(&#39;//*[@id=&quot;block-bibliotu-content&quot;]/article/ul/li&#39;) ] list_all = [] for i in range(len(blocchi)): pos = i+1 data = blocchi[i][0][0] files = driver.find_element_by_xpath(&#39;//*[@id=&quot;block-bibliotu-content&quot;]/article/ul/li&#39;+ str([pos]) + &#39;/ul&#39;) li = files.find_elements_by_tag_name(&quot;a&quot;) file_list = [elem.get_attribute(&quot;href&quot;) for elem in li] csv = [elem for elem in file_list if elem.endswith(&#39;csv&#39;)][0] list_all.append([data,csv]) # lista contenente la data (anno,mese) e tutti gli url per il download di ogni singolo csv . download dei csv, ciascuno in una cartella separata . i csv vengono rinominati automaticamente con anno e mese . for i in range(0,len(list_all)): if not os.path.exists(os.path.join(folder_path, str(list_all[i][0]))): os.makedirs(os.path.join(folder_path, str(list_all[i][0]))) folder = os.path.join(folder_path, str(list_all[i][0])) print(f&#39;cartella: {list_all[i][0]}&#39;) subprocess.run([&#39;wget&#39;,&#39;-P&#39;,folder,list_all[i][1]]) os.rename(os.path.join(folder,&#39;DET_P_MESEPREC_01.csv&#39;),os.path.join(folder,list_all[i][0])+&#39;.csv&#39; ) . cartella: 201707 cartella: 201708 cartella: 201709 cartella: 201710 cartella: 201711 cartella: 201801 cartella: 201802 cartella: 201803 cartella: 201804 cartella: 201805 cartella: 201806 cartella: 201807 cartella: 201808 cartella: 201809 cartella: 201810 cartella: 201811 cartella: 201812 cartella: 201901 cartella: 201902 cartella: 201903 cartella: 201904 cartella: 201905 cartella: 201906 cartella: 201907 . # chiudere il driver Selenium driver.quit() . csv_files = glob.glob( folder_path+&#39;/**/*.csv&#39;, recursive=True) . voil&#224;... . .",
            "url": "https://marcogoldin.github.io/blog/2020/03/11/download-open-data-biblioteche-roma-con-python-selenium.html",
            "relUrl": "/2020/03/11/download-open-data-biblioteche-roma-con-python-selenium.html",
            "date": " • Mar 11, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://marcogoldin.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://marcogoldin.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}